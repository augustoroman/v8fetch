// Code generated by go-bindata.
// sources:
// dist/bundle.js
// DO NOT EDIT!

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distBundleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\xdf\x93\xda\x46\x12\x7e\xc6\x7f\x45\xdb\x0f\x41\xda\xc3\x82\xd8\x2f\x57\xcb\x91\x1c\xde\xac\xcb\x9b\x4b\x76\x5d\x76\x2a\xf7\x40\x6d\x91\x41\x0c\x20\x5b\x68\x74\x33\xa3\x65\xb9\x84\xff\xfd\xba\xe7\x87\x7e\x20\xc1\x5e\xe2\xbb\x0a\xe5\xf2\x0a\xcd\x74\xcf\xd7\x5f\xf7\x7c\xd3\xc3\xf0\xc2\x7c\x86\x10\xac\x8a\x2c\xd6\x89\xc8\x82\xad\x58\x16\x29\x57\x21\xfc\x0a\xc3\x21\xec\xf8\x22\x67\xf1\xe7\x37\x42\x68\xa5\x25\xcb\x9f\x95\x16\x3d\x1c\xfd\x69\xc3\xc1\xce\x87\x98\xc5\x1b\x5e\x1b\x7d\x60\x12\x92\x4c\x69\x96\xa6\x7c\xf9\xa3\xf5\x09\x13\xf8\xf5\x30\x7e\xd6\xf6\x21\xf9\xbf\x8a\x44\x72\xf0\x20\x6a\x33\xfc\x2b\x98\xcf\x1d\x96\xb9\x9b\x3d\x9f\x3b\xac\x37\x4b\x04\x5b\xf7\x4a\x6e\xaf\x36\x3c\xfe\x0c\xc9\xca\xe3\x4b\x14\xc2\x69\xa1\xec\x25\xab\xe0\x18\xe5\xcc\x7b\xbd\x0f\xeb\x33\x7b\x92\xeb\x42\x66\xad\xa0\xaa\xe9\x11\x7f\xcc\x85\xd4\x6a\xdc\xc2\x22\x39\xd3\x1c\x18\x64\x7c\xe7\xf1\x04\x2c\x5b\x42\x5e\x68\x48\xf0\x5f\xa6\x05\xe8\x8d\x23\xb1\xb1\x2a\xd1\xe8\x2c\x26\x67\x96\x26\x66\x1b\x60\x1d\x94\x4b\x24\x7c\xd0\x18\x48\x96\x97\xe0\xcd\x9a\x23\xa9\x60\x4b\x8e\xa3\x2b\x96\xaa\x06\x47\x87\x56\x40\xd7\x8f\x3c\x2e\x30\x22\x5d\xe5\xbf\x23\x75\xbd\x6d\x8b\xa1\x18\xe1\xbb\xac\x79\xb6\x06\xce\x83\xff\x5b\xbd\xef\xc8\x78\xd8\x82\xf2\x36\x65\xeb\x3a\x0e\xa6\xc0\x06\xd2\x06\x12\xd9\x01\xe4\x4a\xcb\x82\xb7\x3c\x7d\xb0\xf9\x25\x5f\x0e\x02\x88\x55\xcd\x75\x7d\xba\xab\x85\x26\xe2\x71\x6d\xc6\xe1\xd9\x51\x99\xd3\x1c\x55\x67\x0c\xbd\x2f\x3e\xf1\x58\x43\x50\xc5\xe9\x46\x30\xce\x9a\x71\x07\x0d\xd1\x16\x83\x70\x93\x8f\xf7\x53\x6b\xa1\x56\xd1\x77\x39\x8c\x3b\xca\xeb\xd8\x73\x65\x97\x17\x8b\x34\x89\xe7\x39\xd3\x9b\xf9\xfc\x09\xcf\x39\x7a\x7e\xf1\xe2\xd8\xd7\x0f\x98\x0a\xe0\x99\x96\xfb\x32\x71\xb8\x1f\x1c\xad\x8e\xcf\x9a\x85\x1b\xe8\xd2\x80\x51\x58\xe3\xfd\x50\x12\xf7\xe5\x9f\x61\xe5\x36\x98\xe1\x33\x8c\xc0\xbd\x1b\xc2\x91\x5a\x0e\xe0\x6c\xd1\x92\x3a\x75\x71\x13\x7c\x4d\xf5\xec\x5c\x9a\x7d\x0a\x5f\x7f\xd1\x1a\xe8\xe0\x9f\xd7\x6f\xde\x4f\xaf\xfe\x01\x3f\x4f\x3f\xc0\xcd\xed\xf7\xd7\x57\x3f\xdd\xdc\xdd\xa2\xd3\x4a\xe0\xd7\xa9\x58\xb0\x14\x0d\x9a\xd5\x8b\x69\xb2\x23\xb3\x17\x2b\xae\xe3\xcd\x0b\x12\x95\x2e\xd0\xaf\x10\xf4\xb9\x95\x0e\x76\x97\x97\x68\xab\x95\xe9\x4c\x91\x7e\x97\x25\x6a\x0c\x87\x20\xc4\x4f\x93\x81\x57\x5f\xc8\xc0\xc5\xb3\x1e\x5c\x80\x09\x21\xfa\xa4\xe8\x8b\x79\xc1\xcc\x21\xc3\x95\x86\xe9\xfb\x1b\x88\xc5\x16\x8b\x37\x59\x60\xdd\xed\x12\xbd\xc1\xff\xb2\xa5\xd8\x45\xc6\x8a\xa6\x0f\xd1\x15\x49\xef\x3b\x8e\x8a\x21\xd5\x09\x26\x5e\x9b\xf4\xf5\x5a\x3c\xbe\x25\x37\xe3\x1a\x1a\xf3\x02\xe2\x94\xa9\x0a\xd0\xdf\x73\x26\xd9\x16\x00\x7e\x4c\x1e\x51\x94\xf0\x53\xc8\x14\xff\x9f\x2e\x94\x48\x49\x5c\xe9\xab\x90\x28\x4b\x16\xb6\xd9\x9d\x59\xcc\x9b\xc6\x77\x56\x43\x00\x44\x8e\x4b\xbb\x85\xf0\x19\x59\x53\x76\xa6\x23\x1c\xde\x4b\xb1\x4d\x14\xb7\xd1\x55\xc7\xaa\xb1\x08\x70\xad\x01\x08\x4b\x21\xd0\xb9\x8f\x19\x14\x3b\xa0\x44\x92\xa2\x96\xe2\x8e\x83\x78\xa4\x06\xcf\x03\xca\x5f\x09\x09\x65\xd2\xb8\xc1\x54\xf6\x28\x10\xb7\x24\x9d\x76\x0d\xf7\xe3\x23\xef\x85\xd2\x62\x0b\x79\x09\xcc\xfa\x36\x26\x91\x83\x4b\x90\x8c\x4f\xbd\x91\x68\x42\x2e\xaf\xa5\x14\x32\xe8\x67\x98\xbf\x07\xee\xad\x01\xff\x53\x49\xb6\x1e\x80\xe2\x1a\x1a\x2e\x00\x0f\xd7\xbd\x28\x24\x1e\x6c\x0f\x42\x26\x74\x10\xa7\x9a\x4b\x6b\xdf\xa7\x62\x06\x38\x58\x68\x66\x7d\x04\x7b\x7a\x55\x4a\x8a\xe1\x9e\xa3\x0b\xbf\x68\xd3\x09\xd5\x8d\xcb\x00\xd6\x82\x80\xdf\x7e\xb3\x5d\x8f\x0d\x7d\x87\x4d\x14\x6c\xb4\xce\x23\x59\x26\x16\x01\xfa\xca\x6b\x71\xe7\xa3\xa8\x76\x91\xe4\x58\x20\x0f\xb8\x1b\x24\xa7\xdc\xfb\xa4\x19\xef\x99\x90\x5b\x96\x26\xff\xe6\xb0\xb1\x95\x6b\x47\x08\xd2\xa6\x2c\x65\xf2\xed\x0a\x3b\x70\x40\x23\x3f\x6a\xc0\xba\x44\x39\x3e\xdc\x50\xb4\x61\x0a\xe3\x57\x5c\xbe\x64\x6b\x54\xee\x7e\x58\xb2\x04\xde\x79\x84\xe4\x37\xe6\x0c\xa0\xbf\x16\x29\xcb\xd6\x2f\x4d\x80\xc3\x51\x34\x82\xe0\x2f\x14\xbe\xba\x1c\x0e\xd7\xb8\xf5\x8a\x45\x84\x9b\x71\xc8\x8a\x35\x55\x03\xc6\xca\xb2\xe1\xc3\x5f\xcd\xec\xd0\xf1\x8a\xcc\x3a\x3c\x8d\x65\x62\x91\x65\xdc\x50\x42\xcb\xc4\x29\x9e\x7a\xfd\x33\xc8\x59\x1c\xf3\xfc\x0c\x6a\x37\x8e\xae\x2e\x86\x17\xad\x95\x8f\x79\x9a\x94\xc6\x92\xed\x82\x72\x59\x4c\x81\xe2\x78\x90\x95\x6a\x53\xf1\x2f\x79\x29\x0d\xd1\x5a\x98\xbf\x1f\xf7\x59\x6c\xf7\xc6\xf7\x1f\xef\x6e\x23\x6c\xb0\xb1\x98\x92\xd5\xde\x67\x25\xf4\x28\xd0\x36\xa2\xca\x9b\x90\x28\xf8\xb5\x5c\x1d\x04\x94\xce\x0f\x5c\xe5\x68\xc0\xa9\x38\x9c\x15\x65\xd1\xb4\x6e\x95\x0c\xf9\x59\xa7\x94\xc8\x8b\x89\xd5\x92\x72\x76\xa7\x9c\xfc\x2c\x92\xe5\xb1\x96\x54\x28\x1c\xc9\xd6\x61\x84\x8b\x25\xeb\xcc\x68\x06\x56\xad\x85\x47\x5f\x22\xf1\x99\x9a\x31\x7a\x42\x21\xd1\x85\x82\x6f\x26\xf0\x6a\x34\x82\xaf\xbe\x6a\xbc\xfd\x1b\xbc\x1e\x8d\x28\x9a\x5a\x2c\xdf\xf1\x58\x2c\xe9\xe6\xe0\x40\xa2\x4a\x7d\x52\x46\xa1\x2e\xce\xe9\x9e\x87\x18\xa1\x6e\x68\xa1\xf7\x39\x8f\xc8\x0c\x61\xd4\x4f\xa9\xda\x46\x34\x38\x34\x7f\xd4\x41\x18\x61\x4f\x95\x55\xfb\x90\x5e\x96\xc5\xe4\x66\x9b\x3c\x22\x9d\xc8\x81\x19\xae\x65\xe2\x0c\xf6\x85\x58\xee\x29\x00\x32\xf9\x03\x01\x90\xd9\xe9\x00\xda\x4a\xd2\x56\x90\xc9\x37\xe6\x64\xb6\xf5\x64\x22\x26\x48\xe1\xb8\x82\xde\x54\x54\x4c\x1a\x2e\x8c\xb2\xef\x5f\x3c\x9f\x4c\xa0\x5f\x64\x4b\xbe\x4a\x32\xbe\xec\xc3\xb7\xe5\xc8\x25\x94\xaf\x8f\x7b\x9d\xd7\x4f\x9f\xf4\x56\xdc\x2a\xe6\xfc\xa6\xab\x1d\xec\xfe\x88\x36\x35\x8d\x1d\xfb\xca\x7c\x11\xd9\x03\xcf\x12\x94\x20\x34\x49\x73\x2b\x84\xe6\x54\x6f\x1d\xd6\xce\xbe\x7e\x5c\x37\x5c\x9e\xde\x26\x5e\x0b\xaa\x9d\x52\x89\xee\x13\x3b\xc5\xcb\xaf\x33\xb0\x61\x9a\x8e\x43\xf1\x74\xe5\x36\x05\x52\xdf\x33\xc9\x98\x57\xaa\x63\x4f\x12\xea\xa0\xdf\xf9\xb5\x7a\xa4\x75\x7e\x46\xed\x48\x7e\x57\xf9\xc6\xdb\xdd\x49\xe1\xea\x99\xfc\x92\xc7\x3c\x65\x78\x45\xb6\xb7\x12\x7c\xb3\xc2\xe6\x23\x20\x48\x58\x69\x39\x5d\x9e\x37\x0d\x87\xc7\x0a\x7b\xb7\xcb\x30\xe7\x48\xb5\xde\x07\x64\x11\xba\x79\x3d\xcc\x85\x4e\x32\xba\x70\xf5\xdc\x5a\xc6\xd6\x55\x90\xf3\x30\x23\x13\xec\x38\xa9\x8e\xac\x0e\xf6\xbd\xbd\x55\x02\x94\x68\x9a\x32\x68\x1a\x18\xe1\x45\xaf\xc0\xf1\xce\x0a\xe7\xdd\x66\xc5\x76\xc1\x65\x9f\xc4\xe5\x79\xa2\x6e\xd9\x6d\xd0\x74\xf5\xdf\xac\x17\x69\xf1\xd1\xa0\x0b\xc2\xf6\xd2\xcd\x35\x6b\x99\x98\x4a\xc9\xf6\xde\x7d\xd3\x1f\x92\x7c\x8d\xd7\xb3\x4a\x55\xb0\x3f\xd9\xfa\xa9\x3d\x2a\x86\x88\xe5\x39\x1e\x29\x0e\x0d\x0d\x37\x41\xd0\xbc\x43\xe8\xc8\xb5\x04\x1f\x1a\x9a\x6f\xaa\x70\x95\x48\xa5\x5d\x2c\x78\x1c\xa5\x05\x87\x35\xb6\x3f\x28\x0f\xd8\xca\xb4\x4b\xdc\xfa\x07\x33\x0a\xae\x92\xca\xa9\x55\x69\x9b\xd6\xd5\xd5\xb6\x2b\xb7\x9a\x2e\xad\x79\x43\x96\xc8\xdc\x46\x46\x45\x95\x26\x4a\x7b\xf1\xf7\xf5\x3d\xa3\x29\x18\xdd\x0f\x62\xc7\xe5\x15\x43\xa9\x0a\xef\x29\x30\xb7\x9c\x31\xf9\xd6\xfc\x99\x8d\xee\x51\x59\xb2\x22\x4d\xdd\x21\x77\x1c\x2f\x35\xae\xf5\x68\xd5\xff\x22\x5c\x93\xc7\x73\xe1\x4e\xd3\xb4\x3b\x62\xb3\x59\x4c\xac\xd4\x8b\x98\xf7\x2e\xc9\xce\xf7\xec\xbe\xdc\x89\xf5\x83\xe7\x09\x66\x1a\x91\xdf\x60\x47\x4a\x3f\x33\x89\x07\x04\x5f\xc5\xdf\x21\x60\x6f\xbd\x0c\x99\x06\x7f\x81\x97\x1a\xf0\x3f\xe9\x2c\x81\xb6\x3d\xc7\x92\x34\xa5\x66\x6f\x47\x65\xc3\xab\x48\x10\x90\xcd\x81\x21\x67\x60\x30\x4e\xe5\x3a\x6c\xba\x7f\x23\x44\xca\x59\x06\xe0\xc7\xf1\xe9\x17\x7a\xfc\x85\x74\xd9\x9c\x56\xb4\x48\xb9\x76\xed\x76\xd1\x2d\x9b\x6d\xae\xdd\xb6\xa9\x93\xed\xdd\x55\xa8\x0c\xc1\xae\x05\xc1\xe4\xd4\x04\xea\x16\xd1\xab\xa0\xc1\x70\xd8\xde\x8a\x55\xfa\x7a\xed\x64\x74\x6c\x5d\x43\x4d\xa9\x7a\x0e\x8e\xbd\x0c\x3b\x48\x03\x68\xd1\x17\x9a\x8d\x5b\x3d\x57\x8f\xf5\x5d\x7c\x87\x39\xdd\x99\xbb\xcb\x1f\x2d\xea\x76\x55\x1f\xcf\xb3\xaa\xe0\xe7\x99\x6f\xbf\x23\x23\xaa\xbd\xd9\x5d\xb4\x96\x91\x27\xcb\x19\xad\x67\x66\x7e\xab\xb0\xa7\x46\x00\xb1\xa7\xb6\x08\x05\xdd\x97\xf8\x23\xaa\x00\xc1\xb6\x1e\xff\xec\xe8\xad\x46\x9f\x25\xe0\xb4\x04\x94\x07\x4e\xdd\x66\x5c\x89\x43\xa9\x0c\x4f\x72\x18\xe5\x85\xda\x04\xa5\x83\x06\x8b\xf6\x07\x71\xda\x78\x9b\x8a\x0b\xcb\x23\x77\x3f\x2b\x74\x33\xf3\x94\x2a\xba\xed\x7e\x92\x1b\x0c\xb7\x5b\x14\xbb\x84\xee\xb8\x93\x68\x07\xd9\x0a\xec\x3b\x9e\x72\x73\xa9\xff\x3f\x28\xfe\xb9\xa4\xcf\xfa\x4b\xb3\x72\xff\xbe\x3b\x3c\x3b\xfa\xfb\x75\xdc\x9d\x60\xd8\x9e\x95\x1d\x66\x90\x89\xec\xa5\xca\x79\x0c\x2c\x4f\xc2\xf6\x15\xe1\xce\xf5\x6c\x27\x32\x40\xae\x8e\xef\x07\x9d\xec\xfb\x1b\xa3\xeb\xd2\xab\x1f\x40\xb1\xd1\xfa\x4f\x00\x00\x00\xff\xff\xc2\xb3\x05\x19\x2b\x1a\x00\x00")

func distBundleJsBytes() ([]byte, error) {
	return bindataRead(
		_distBundleJs,
		"dist/bundle.js",
	)
}

func distBundleJs() (*asset, error) {
	bytes, err := distBundleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/bundle.js", size: 6699, mode: os.FileMode(420), modTime: time.Unix(1471988928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/bundle.js": distBundleJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"bundle.js": &bintree{distBundleJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

